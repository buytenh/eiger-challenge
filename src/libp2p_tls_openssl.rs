//! libp2p TLS handshaking using OpenSSL
//!
//! Functionality for performing a [libp2p TLS
//! handshake](https://github.com/libp2p/specs/blob/master/tls/tls.md) using
//! [openssl](https://crates.io/crates/openssl) as the underlying TLS library.

use asn1_rs::ToDer;
use openssl::asn1::Asn1Integer;
use openssl::asn1::Asn1Object;
use openssl::asn1::Asn1OctetString;
use openssl::asn1::Asn1Time;
use openssl::bn::BigNum;
use openssl::bn::BigNumContext;
use openssl::ec::EcGroup;
use openssl::ec::EcKey;
use openssl::ec::EcPoint;
use openssl::ec::PointConversionForm;
use openssl::hash::MessageDigest;
use openssl::nid::Nid;
use openssl::pkey::Id;
use openssl::pkey::PKey;
use openssl::pkey::Private;
use openssl::pkey::Public;
use openssl::rand::rand_bytes;
use openssl::sign::Signer;
use openssl::sign::Verifier;
use openssl::ssl::SslContext;
use openssl::ssl::SslContextBuilder;
use openssl::ssl::SslMethod;
use openssl::ssl::SslMode;
use openssl::ssl::SslOptions;
use openssl::ssl::SslVerifyMode;
use openssl::ssl::SslVersion;
use openssl::x509::X509Builder;
use openssl::x509::X509Extension;
use openssl::x509::X509Ref;
use openssl::x509::X509StoreContextRef;
use openssl::x509::X509;
use protobuf::Message;
use std::io::Error;
use std::io::ErrorKind;
use std::str::FromStr;
use x509_parser::prelude::*;

include!(concat!(env!("OUT_DIR"), "/protos/mod.rs"));

const LIBP2P_PUBLIC_KEY_EXTENSION_OID: &str = "1.3.6.1.4.1.53594.1.1";
const LIBP2P_TLS_HANDSHAKE_PREFIX: &str = "libp2p-tls-handshake:";

#[derive(asn1_rs::DerSequence)]
struct LibP2pPublicKeyExtension<'a> {
    public_key: &'a [u8],
    signature: &'a [u8],
}

/// Verify that a given X.509 certificate is a valid libp2p TLS certificate, and extract the
/// embedded libp2p node public key
///
/// This function checks that the certificate contains the libp2p X.509 public key extension, that
/// the extension is validly formatted, that it contains a libp2p node key and a signature, that
/// the node key is either an Ed25519 or an ECDSA key, and that the signature is a valid signature
/// of the TLS key referenced in the X.509 certificate by the libp2p node key.  Returns the
/// extracted libp2p node key on success, or an error otherwise.
pub fn validate_certificate_and_extract_host_key(cert: &X509Ref) -> Result<PKey<Public>, Error> {
    let der = cert.to_der()?;

    let (_, x509) = X509Certificate::from_der(&der).map_err(|err| {
        Error::new(
            ErrorKind::InvalidData,
            format!("error parsing certificate from DER: {}", err),
        )
    })?;

    let libp2p_public_key_extension_oid = asn1_rs::Oid::from_str(LIBP2P_PUBLIC_KEY_EXTENSION_OID)
        .map_err(|err| {
        Error::new(
            ErrorKind::Other,
            format!("error parsing libp2p public key extension OID: {:?}", err),
        )
    })?;

    let libp2p_public_key_extension = x509
        .get_extension_unique(&libp2p_public_key_extension_oid)
        .map_err(|err| {
            Error::new(
                ErrorKind::InvalidData,
                format!("error retrieving libp2p public key extension: {}", err),
            )
        })?
        .ok_or_else(|| Error::new(ErrorKind::NotFound, "libp2p public key extension not found"))?;

    let (rem, libp2p_public_key_extension) =
        LibP2pPublicKeyExtension::from_der(libp2p_public_key_extension.value).map_err(|err| {
            Error::new(
                ErrorKind::InvalidData,
                format!("error decoding libp2p public key extension DER: {}", err),
            )
        })?;

    if !rem.is_empty() {
        return Err(Error::new(
            ErrorKind::InvalidData,
            "error decoding libp2p public key extension DER",
        ));
    }

    let public_key =
        publickey::PublicKey::parse_from_bytes(libp2p_public_key_extension.public_key)?;

    let key_type = public_key.Type.ok_or_else(|| {
        Error::new(
            ErrorKind::NotFound,
            "error decoding libp2p public key: key type not found",
        )
    })?;

    let key_data = public_key.Data.ok_or_else(|| {
        Error::new(
            ErrorKind::NotFound,
            "error decoding libp2p public key: key data not found",
        )
    })?;

    let host_public_key = match key_type.enum_value() {
        Ok(publickey::KeyType::Ed25519) => PKey::public_key_from_raw_bytes(&key_data, Id::ED25519)?,
        Ok(publickey::KeyType::Secp256k1) => {
            let group = EcGroup::from_curve_name(Nid::SECP256K1)?;
            let mut ctx = BigNumContext::new()?;
            let point = EcPoint::from_bytes(&group, &key_data, &mut ctx)?;
            let key = EcKey::from_public_key(&group, &point)?;
            key.check_key()?;

            PKey::from_ec_key(key)?
        }
        Ok(publickey::KeyType::ECDSA) => PKey::public_key_from_der(&key_data)?,
        _ => {
            return Err(Error::new(
                ErrorKind::InvalidData,
                format!(
                    "error decoding libp2p public key: type {:?}",
                    key_type.enum_value(),
                ),
            ));
        }
    };

    let mut signed_data = Vec::<u8>::new();
    signed_data.extend_from_slice(LIBP2P_TLS_HANDSHAKE_PREFIX.as_bytes());
    signed_data.extend_from_slice(&cert.public_key()?.public_key_to_der()?);

    if !Verifier::new_without_digest(&host_public_key)?
        .verify_oneshot(libp2p_public_key_extension.signature, &signed_data)?
    {
        return Err(Error::new(
            ErrorKind::InvalidData,
            "libp2p public key extension signature verification failed",
        ));
    }

    Ok(host_public_key)
}

/// Verify that a given X.509 certificate is a valid libp2p TLS certificate
///
/// This is a variant of [validate_certificate_and_extract_host_key] that simply returns
/// success or failure, without returning the extracted libp2p host key.
pub fn validate_certificate(cert: &X509Ref) -> Result<(), Error> {
    validate_certificate_and_extract_host_key(cert).map(|_| ())
}

/// Generate the libp2p public key X.509 certificate extension for a given libp2p node host key and
/// TLS key
fn generate_libp2p_public_key_extension(
    host_key: &PKey<Private>,
    tls_key: &PKey<Private>,
) -> Result<Vec<u8>, Error> {
    let mut protobuf_host_public_key = publickey::PublicKey::new();
    match host_key.id() {
        Id::ED25519 => {
            protobuf_host_public_key.Type =
                Some(protobuf::EnumOrUnknown::new(publickey::KeyType::Ed25519));
            protobuf_host_public_key.Data = Some(host_key.raw_public_key()?.to_vec());
        }
        Id::EC => {
            let ec_key = host_key.ec_key()?;
            let group = ec_key.group();

            if group.curve_name() == Some(Nid::SECP256K1) {
                let mut ctx = BigNumContext::new()?;

                protobuf_host_public_key.Type =
                    Some(protobuf::EnumOrUnknown::new(publickey::KeyType::Secp256k1));
                protobuf_host_public_key.Data = Some(ec_key.public_key().to_bytes(
                    group,
                    PointConversionForm::COMPRESSED,
                    &mut ctx,
                )?);
            } else {
                protobuf_host_public_key.Type =
                    Some(protobuf::EnumOrUnknown::new(publickey::KeyType::ECDSA));
                protobuf_host_public_key.Data = Some(ec_key.public_key_to_der()?);
            }
        }
        _ => {
            return Err(Error::new(
                ErrorKind::Unsupported,
                format!("unsupported host key type: {:?}", host_key.id()),
            ));
        }
    }

    let mut data_to_sign = Vec::<u8>::new();
    data_to_sign.extend_from_slice(LIBP2P_TLS_HANDSHAKE_PREFIX.as_bytes());
    data_to_sign.extend_from_slice(&tls_key.public_key_to_der()?);

    let signature = Signer::new_without_digest(host_key)?.sign_oneshot_to_vec(&data_to_sign)?;

    let libp2p_public_key_extension = [&protobuf_host_public_key.write_to_bytes()?, &signature[..]];

    let mut dst = Vec::new();

    asn1_rs::Sequence::from_iter_to_der(libp2p_public_key_extension.iter())
        .map_err(|err| {
            Error::new(
                ErrorKind::Other,
                format!(
                    "error creating SEQUENCE for libp2p public key extension: {}",
                    err
                ),
            )
        })?
        .write_der(&mut dst)
        .map_err(|err| {
            Error::new(
                ErrorKind::Other,
                format!("error encoding libp2p public key extension: {}", err),
            )
        })?;

    Ok(dst)
}

/// Generate a key pair and X.509 certificate to use for TLS handshaking for a given libp2p node
/// host key
///
/// For a given libp2p node host key, which can be in Ed25519 or in ECDSA format, generate a key
/// pair and X.509 certificate to use for TLS handshaking.  This function can be called directly,
/// but most users will want to use [new_ssl_context] instead, which generates the key pair and
/// certificate as well as setting up the SSL context to use this key pair and certificate and
/// for validation of the peer's X.509 certificate with its hopefully included X.509 libp2p public
/// key extension.
pub fn generate_tls_key_and_certificate(
    host_key: &PKey<Private>,
) -> Result<(PKey<Private>, X509), std::io::Error> {
    let tls_key = PKey::<Private>::ec_gen("prime256v1")?;

    let mut x509builder = X509Builder::new()?;

    x509builder.set_version(2)?;

    let mut serial_number: [u8; 8] = [0; 8];
    rand_bytes(&mut serial_number)?;
    let serial_number_bn = BigNum::from_slice(&serial_number)?;
    let serial_number_asn1 = Asn1Integer::from_bn(&serial_number_bn)?;
    x509builder.set_serial_number(&serial_number_asn1)?;

    let not_before = Asn1Time::from_str_x509("750101000000Z")?;
    x509builder.set_not_before(&not_before)?;

    let not_after = Asn1Time::from_str_x509("40960101000000Z")?;
    x509builder.set_not_after(&not_after)?;

    x509builder.set_pubkey(&tls_key)?;

    let oid = Asn1Object::from_str(LIBP2P_PUBLIC_KEY_EXTENSION_OID)?;

    let libp2p_public_key_extension_octet_string = Asn1OctetString::new_from_bytes(
        &generate_libp2p_public_key_extension(host_key, &tls_key)?,
    )?;

    x509builder.append_extension(X509Extension::new_from_der(
        &oid,
        true,
        &libp2p_public_key_extension_octet_string,
    )?)?;

    x509builder.sign(&tls_key, MessageDigest::sha256())?;

    Ok((tls_key, x509builder.build()))
}

/// Callback function for openssl peer certificate validation
fn verify_callback(x509_store_context: &mut X509StoreContextRef) -> Result<(), Error> {
    let cert_chain = x509_store_context.chain().ok_or(Error::new(
        ErrorKind::NotFound,
        "certficate chain is missing",
    ))?;

    if cert_chain.len() != 1 {
        return Err(Error::new(
            ErrorKind::InvalidData,
            "certficate chain length is not 1",
        ));
    }

    let cert = cert_chain
        .get(0)
        .ok_or(Error::new(ErrorKind::NotFound, "certficate 0 is missing"))?;

    validate_certificate(cert)
}

/// Build an openssl SSL context that allows performing a libp2p TLS handshake for the given local
/// node's host key
///
/// This builds and returns an openssl SSL context with all the right options set to enable
/// authenticating ourselves to our TLS peer and the TLS peer to us.  The local node's host key has
/// to be generated by the caller, and has to be an Ed25519 or ECDSA key.
///
/// The returned SSL context will attempt to negotiate the "libp2p" application-layer protocol via
/// ALPN, meaning that multistream-select will then have to be used inside the established TLS
/// session to negotiate a multiplexing protocol.
pub fn new_ssl_context(host_key: &PKey<Private>) -> Result<SslContext, Error> {
    let (tls_key, x509_certificate) = generate_tls_key_and_certificate(host_key)?;

    let mut builder = SslContextBuilder::new(SslMethod::tls_client())?;

    builder.set_verify_callback(SslVerifyMode::PEER, |_verify_ok, x509_store_context| {
        match verify_callback(x509_store_context) {
            Ok(()) => true,
            Err(err) => {
                // TODO: Find a way to return this error to the initiator
                // of the TLS connect / accept call instead of printing it.
                eprintln!("peer certificate validation failed: {}", err);
                false
            }
        }
    });

    builder.set_mode(
        SslMode::RELEASE_BUFFERS
            | SslMode::AUTO_RETRY
            | SslMode::ACCEPT_MOVING_WRITE_BUFFER
            | SslMode::ENABLE_PARTIAL_WRITE,
    );

    builder.set_options(
        (SslOptions::ALL | SslOptions::NO_COMPRESSION | SslOptions::NO_SSL_MASK)
            & !SslOptions::NO_TLSV1_3,
    );

    builder.set_min_proto_version(Some(SslVersion::TLS1_3))?;
    builder.set_max_proto_version(Some(SslVersion::TLS1_3))?;
    builder.set_alpn_protos(b"\x06libp2p")?;

    builder.set_private_key(&tls_key)?;
    builder.set_certificate(&x509_certificate)?;

    builder.set_ciphersuites(
        "TLS_CHACHA20_POLY1305_SHA256:\
        TLS_AES_128_GCM_SHA256:\
        TLS_AES_256_GCM_SHA384",
    )?;

    Ok(builder.build())
}

#[cfg(test)]
mod test {
    use openssl::pkey::*;
    use openssl::x509::X509;

    // Validate the libp2p ED25519 test vector certificate from
    // https://github.com/libp2p/specs/blob/master/tls/tls.md .
    #[test]
    fn test_libp2p_ed25519_test_certificate() {
        let cert_der = [
            0x30, 0x82, 0x01, 0x77, 0x30, 0x82, 0x01, 0x1e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
            0x09, 0x00, 0xf5, 0xbd, 0x0d, 0xeb, 0xaa, 0x59, 0x7f, 0x52, 0x30, 0x0a, 0x06, 0x08,
            0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x00, 0x30, 0x20, 0x17, 0x0d,
            0x37, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18,
            0x0f, 0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x5a, 0x30, 0x00, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
            0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
            0x42, 0x00, 0x04, 0x6b, 0xf9, 0x87, 0x12, 0x20, 0xd7, 0x1d, 0xcb, 0x34, 0x83, 0xec,
            0xdf, 0xcb, 0xfc, 0xc7, 0xc1, 0x03, 0xf8, 0x50, 0x9d, 0x09, 0x74, 0xb3, 0xc1, 0x8a,
            0xb1, 0xf1, 0xbe, 0x13, 0x02, 0xd6, 0x43, 0x10, 0x3a, 0x08, 0xf7, 0xa7, 0x72, 0x2c,
            0x1b, 0x24, 0x7b, 0xa3, 0x87, 0x6f, 0xe2, 0xc5, 0x9e, 0x26, 0x52, 0x6f, 0x47, 0x9d,
            0x77, 0x18, 0xa8, 0x52, 0x02, 0xdd, 0xbe, 0x47, 0x56, 0x23, 0x58, 0xa3, 0x7f, 0x30,
            0x7d, 0x30, 0x7b, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xa2, 0x5a, 0x01,
            0x01, 0x01, 0x01, 0xff, 0x04, 0x6a, 0x30, 0x68, 0x04, 0x24, 0x08, 0x01, 0x12, 0x20,
            0x7f, 0xda, 0x21, 0x85, 0x67, 0x09, 0xc5, 0xae, 0x12, 0xfd, 0x6e, 0x84, 0x50, 0x62,
            0x3f, 0x15, 0xf1, 0x19, 0x55, 0xd3, 0x84, 0x21, 0x2b, 0x89, 0xf5, 0x6e, 0x7e, 0x13,
            0x6d, 0x2e, 0x17, 0x28, 0x04, 0x40, 0xaa, 0xa6, 0xbf, 0xfa, 0xbe, 0x91, 0xb6, 0xf3,
            0x0c, 0x35, 0xe3, 0xaa, 0x4f, 0x94, 0xb1, 0x18, 0x8f, 0xed, 0x96, 0xb0, 0xff, 0xdd,
            0x39, 0x3f, 0x4c, 0x58, 0xc1, 0xc0, 0x47, 0x85, 0x41, 0x20, 0xe6, 0x74, 0xce, 0x64,
            0xc7, 0x88, 0x40, 0x6d, 0x1c, 0x2c, 0x4b, 0x11, 0x65, 0x81, 0xfd, 0x74, 0x11, 0xb3,
            0x09, 0x88, 0x1c, 0x3c, 0x7f, 0x20, 0xb4, 0x6e, 0x54, 0xc7, 0xe6, 0xfe, 0x7f, 0x0f,
            0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x47,
            0x00, 0x30, 0x44, 0x02, 0x20, 0x7d, 0x1a, 0x1d, 0xbd, 0x2b, 0xda, 0x23, 0x5f, 0xf2,
            0xec, 0x87, 0xda, 0xf0, 0x06, 0xf9, 0xb0, 0x4b, 0xa0, 0x76, 0xa5, 0xa5, 0x53, 0x01,
            0x80, 0xcd, 0x9c, 0x2e, 0x8f, 0x63, 0x99, 0xe0, 0x9d, 0x02, 0x20, 0x45, 0x85, 0x27,
            0x17, 0x8c, 0x7e, 0x77, 0x02, 0x46, 0x01, 0xdb, 0xb1, 0xb2, 0x56, 0x59, 0x3e, 0x9b,
            0x96, 0xd9, 0x61, 0xb9, 0x63, 0x49, 0xd1, 0xf5, 0x60, 0x11, 0x4f, 0x61, 0xa8, 0x75,
            0x95,
        ];
        let cert = X509::from_der(&cert_der).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Validate the libp2p ECDSA test vector certificate from
    // https://github.com/libp2p/specs/blob/master/tls/tls.md .
    #[test]
    fn test_libp2p_ecdsa_test_certificate() {
        let cert_der = [
            0x30, 0x82, 0x01, 0xc0, 0x30, 0x82, 0x01, 0x66, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
            0x09, 0x00, 0xea, 0xf4, 0x19, 0xa6, 0xe3, 0xed, 0xb4, 0xa6, 0x30, 0x0a, 0x06, 0x08,
            0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x00, 0x30, 0x20, 0x17, 0x0d,
            0x37, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18,
            0x0f, 0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x5a, 0x30, 0x00, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
            0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
            0x42, 0x00, 0x04, 0x8d, 0xbf, 0x11, 0x16, 0xc7, 0xc6, 0x08, 0xd6, 0xd5, 0x29, 0x2b,
            0xd8, 0x26, 0xc3, 0xfe, 0xb5, 0x34, 0x83, 0xa8, 0x9f, 0xce, 0x43, 0x4b, 0xf6, 0x45,
            0x38, 0xa3, 0x59, 0xc8, 0xe0, 0x75, 0x38, 0xff, 0x71, 0xf6, 0x76, 0x62, 0x39, 0xbe,
            0x6a, 0x14, 0x6d, 0xcc, 0x1a, 0x5f, 0x3b, 0xb9, 0x34, 0xbc, 0xd4, 0xae, 0x2a, 0xe1,
            0xd4, 0xda, 0x28, 0xac, 0x68, 0xb4, 0xa2, 0x05, 0x93, 0xf0, 0x6b, 0xa3, 0x81, 0xc6,
            0x30, 0x81, 0xc3, 0x30, 0x81, 0xc0, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83,
            0xa2, 0x5a, 0x01, 0x01, 0x01, 0x01, 0xff, 0x04, 0x81, 0xae, 0x30, 0x81, 0xab, 0x04,
            0x5f, 0x08, 0x03, 0x12, 0x5b, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48,
            0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,
            0x03, 0x42, 0x00, 0x04, 0x84, 0xb9, 0x3f, 0xa4, 0x56, 0xa7, 0x4b, 0xd0, 0x15, 0x39,
            0x19, 0xf0, 0x36, 0xdb, 0x7b, 0xc6, 0x3c, 0x80, 0x2f, 0x05, 0x5b, 0xc7, 0x02, 0x33,
            0x95, 0xd0, 0x20, 0x3d, 0xe7, 0x18, 0xee, 0x0f, 0xc7, 0xb5, 0x70, 0xb7, 0x67, 0xcd,
            0xd8, 0x58, 0xac, 0xa6, 0xc7, 0xc4, 0x11, 0x3f, 0xf0, 0x02, 0xe7, 0x8b, 0xd2, 0x13,
            0x8a, 0xc1, 0xa3, 0xb2, 0x6d, 0xde, 0x35, 0x19, 0xe0, 0x69, 0x79, 0xad, 0x04, 0x48,
            0x30, 0x46, 0x02, 0x21, 0x00, 0xbc, 0x84, 0x01, 0x4c, 0xea, 0x5a, 0x41, 0xfe, 0xab,
            0xdf, 0x4c, 0x16, 0x10, 0x96, 0x56, 0x4b, 0x9c, 0xcf, 0x4b, 0x62, 0xfb, 0xef, 0x4f,
            0xe1, 0xcd, 0x38, 0x2c, 0x84, 0xe1, 0x11, 0x01, 0x78, 0x02, 0x21, 0x00, 0x92, 0x04,
            0xf0, 0x86, 0xa8, 0x4c, 0xb8, 0xed, 0x8a, 0x9d, 0xdd, 0x78, 0x68, 0xdc, 0x90, 0xc7,
            0x92, 0xee, 0x43, 0x4a, 0xdf, 0x62, 0xc6, 0x6f, 0x99, 0xa0, 0x8a, 0x5e, 0xba, 0x11,
            0x61, 0x5b, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02,
            0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x54, 0xb4, 0x37, 0xbe, 0x9a, 0x2e, 0xdf,
            0x59, 0x13, 0x12, 0xd6, 0x8f, 0xf2, 0x4b, 0xf9, 0x13, 0x67, 0xad, 0x41, 0x43, 0xf7,
            0x6c, 0xf8, 0x0b, 0x56, 0x58, 0xf2, 0x32, 0xad, 0xe8, 0x20, 0xda, 0x02, 0x21, 0x00,
            0xe2, 0x3b, 0x48, 0xde, 0x9d, 0xf9, 0xc2, 0x5d, 0x4c, 0x83, 0xdd, 0xdd, 0xf7, 0x5d,
            0x26, 0x76, 0xf0, 0xb9, 0x31, 0x8e, 0xe2, 0xa6, 0xc8, 0x8a, 0x73, 0x6d, 0x85, 0xea,
            0xb9, 0x4a, 0x91, 0x2f,
        ];
        let cert = X509::from_der(&cert_der).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Validate the libp2p secp256k1 test vector certificate from
    // https://github.com/libp2p/specs/blob/master/tls/tls.md .
    #[test]
    fn test_libp2p_secp256k1_test_certificate() {
        let cert_der = [
            0x30, 0x82, 0x01, 0x82, 0x30, 0x82, 0x01, 0x28, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
            0x09, 0x00, 0xf3, 0xb3, 0x05, 0xf5, 0x56, 0x22, 0xcf, 0xdf, 0x30, 0x0a, 0x06, 0x08,
            0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x00, 0x30, 0x20, 0x17, 0x0d,
            0x37, 0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18,
            0x0f, 0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x30, 0x5a, 0x30, 0x00, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
            0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
            0x42, 0x00, 0x04, 0x58, 0xf7, 0xe9, 0x58, 0x17, 0x48, 0xff, 0x9b, 0xdd, 0x93, 0x3b,
            0x65, 0x5c, 0xc0, 0xe5, 0x55, 0x2a, 0x12, 0x48, 0xf8, 0x40, 0x65, 0x8c, 0xc2, 0x21,
            0xde, 0xc2, 0x18, 0x6b, 0x5a, 0x2f, 0xe4, 0x64, 0x1b, 0x86, 0xab, 0x75, 0x90, 0xa3,
            0x42, 0x2c, 0xdb, 0xb1, 0x00, 0x0c, 0xf9, 0x76, 0x62, 0xf2, 0x7e, 0x59, 0x10, 0xd7,
            0x56, 0x9f, 0x22, 0xfe, 0xed, 0x88, 0x29, 0xc8, 0xb5, 0x2e, 0x0f, 0xa3, 0x81, 0x88,
            0x30, 0x81, 0x85, 0x30, 0x81, 0x82, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83,
            0xa2, 0x5a, 0x01, 0x01, 0x01, 0x01, 0xff, 0x04, 0x71, 0x30, 0x6f, 0x04, 0x25, 0x08,
            0x02, 0x12, 0x21, 0x02, 0x6b, 0x05, 0x30, 0x94, 0xd1, 0x11, 0x2b, 0xce, 0x79, 0x9d,
            0xc8, 0x02, 0x60, 0x40, 0xae, 0x6d, 0x4e, 0xb5, 0x74, 0x15, 0x79, 0x29, 0xf1, 0x59,
            0x81, 0x72, 0x06, 0x1f, 0x75, 0x3d, 0x9b, 0x1b, 0x04, 0x46, 0x30, 0x44, 0x02, 0x20,
            0x40, 0x71, 0x27, 0x07, 0xe9, 0x77, 0x94, 0xc4, 0x78, 0xd9, 0x39, 0x89, 0xaa, 0xa2,
            0x8a, 0xe1, 0xf7, 0x1c, 0x03, 0xaf, 0x52, 0x4a, 0x8a, 0x4b, 0xd2, 0xd9, 0x84, 0x24,
            0x94, 0x8a, 0x78, 0x23, 0x02, 0x20, 0x7b, 0x61, 0xb7, 0xf0, 0x74, 0xb6, 0x96, 0xa2,
            0x5f, 0xb9, 0xe0, 0x05, 0x91, 0x41, 0xa8, 0x11, 0xcc, 0xcc, 0x4c, 0xc2, 0x80, 0x42,
            0xd9, 0x30, 0x1b, 0x9b, 0x2a, 0x40, 0x15, 0xe8, 0x74, 0x70, 0x30, 0x0a, 0x06, 0x08,
            0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02,
            0x20, 0x14, 0x3a, 0xe4, 0xd8, 0x6f, 0xdc, 0x86, 0x75, 0xd2, 0x48, 0x0b, 0xb6, 0x91,
            0x2e, 0xca, 0x5e, 0x39, 0x16, 0x5d, 0xf7, 0xf5, 0x72, 0xd8, 0x36, 0xaa, 0x2f, 0x2d,
            0x6a, 0xcf, 0xab, 0x13, 0xf8, 0x02, 0x21, 0x00, 0x83, 0x1d, 0x19, 0x79, 0xa9, 0x8f,
            0x0c, 0x4a, 0x6f, 0xb5, 0x06, 0x9c, 0xa3, 0x74, 0xde, 0x92, 0xf1, 0xa1, 0x20, 0x5c,
            0x96, 0x2a, 0x6d, 0x90, 0xad, 0x3d, 0x75, 0x54, 0xcb, 0x7d, 0x9d, 0xf4,
        ];
        let cert = X509::from_der(&cert_der).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Verify that the libp2p invalid test vector certificate from
    // https://github.com/libp2p/specs/blob/master/tls/tls.md indeed
    // fails validation.
    #[test]
    fn test_libp2p_invalid_test_certificate() {
        let cert_der = [
            0x30, 0x82, 0x01, 0x77, 0x30, 0x82, 0x01, 0x1d, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02,
            0x08, 0x30, 0xa7, 0x3c, 0x5d, 0x89, 0x6a, 0x11, 0x09, 0x30, 0x0a, 0x06, 0x08, 0x2a,
            0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x00, 0x30, 0x20, 0x17, 0x0d, 0x37,
            0x35, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x18, 0x0f,
            0x34, 0x30, 0x39, 0x36, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
            0x5a, 0x30, 0x00, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d,
            0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42,
            0x00, 0x04, 0xbb, 0xe6, 0x2d, 0xf9, 0xa7, 0xc1, 0xc4, 0x6b, 0x7f, 0x1f, 0x21, 0xd5,
            0x56, 0xde, 0xec, 0x53, 0x82, 0xa3, 0x6d, 0xf1, 0x46, 0xfb, 0x29, 0xc7, 0xf1, 0x24,
            0x0e, 0x60, 0xd7, 0xd5, 0x32, 0x85, 0x70, 0xe3, 0xb7, 0x1d, 0x99, 0x60, 0x2b, 0x77,
            0xa6, 0x5c, 0x9b, 0x36, 0x55, 0xf6, 0x28, 0x37, 0xf8, 0xd6, 0x6b, 0x59, 0xf1, 0x76,
            0x3b, 0x8c, 0x9b, 0xeb, 0xa3, 0xbe, 0x07, 0x77, 0x80, 0x43, 0xa3, 0x7f, 0x30, 0x7d,
            0x30, 0x7b, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xa2, 0x5a, 0x01, 0x01,
            0x01, 0x01, 0xff, 0x04, 0x6a, 0x30, 0x68, 0x04, 0x24, 0x08, 0x01, 0x12, 0x20, 0xec,
            0x80, 0x94, 0x57, 0x3a, 0xfb, 0x97, 0x28, 0x08, 0x88, 0x60, 0x86, 0x4f, 0x7b, 0xce,
            0xa2, 0xd4, 0xfd, 0x41, 0x2f, 0xef, 0x09, 0xa8, 0xe2, 0xd2, 0x4d, 0x48, 0x23, 0x77,
            0xc2, 0x0d, 0xb6, 0x04, 0x40, 0xec, 0xab, 0xae, 0x83, 0x54, 0xaf, 0xa2, 0xf0, 0xaf,
            0x4b, 0x8d, 0x2a, 0xd8, 0x71, 0xe8, 0x65, 0xcb, 0x5a, 0x7c, 0x0c, 0x8d, 0x3d, 0xbd,
            0xbf, 0x42, 0xde, 0x57, 0x7f, 0x92, 0x46, 0x1a, 0x0e, 0xbb, 0x0a, 0x28, 0x70, 0x3e,
            0x33, 0x58, 0x1a, 0xf7, 0xd2, 0xa4, 0xf2, 0x27, 0x0f, 0xc3, 0x7a, 0xec, 0x62, 0x61,
            0xfc, 0xc9, 0x5f, 0x8a, 0xf0, 0x8f, 0x3f, 0x48, 0x06, 0x58, 0x1c, 0x73, 0x0a, 0x30,
            0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00,
            0x30, 0x45, 0x02, 0x20, 0x2d, 0xfb, 0x17, 0xa6, 0xfa, 0x0f, 0x94, 0xee, 0x0e, 0x2e,
            0x6a, 0x3b, 0x9f, 0xb6, 0xe9, 0x86, 0xf3, 0x11, 0xde, 0xe2, 0x73, 0x92, 0x05, 0x80,
            0x16, 0x46, 0x4b, 0xd1, 0x30, 0x93, 0x0a, 0x61, 0x02, 0x21, 0x00, 0xba, 0x4b, 0x93,
            0x7a, 0x11, 0xc8, 0xd3, 0x17, 0x2b, 0x81, 0xe7, 0xcd, 0x04, 0xae, 0xdb, 0x79, 0xb9,
            0x78, 0xc4, 0x37, 0x9c, 0x2b, 0x5b, 0x24, 0xd5, 0x65, 0xdd, 0x5d, 0x67, 0xd3, 0xcb,
            0x3c,
        ];
        let cert = X509::from_der(&cert_der).unwrap();
        super::validate_certificate(&cert).unwrap_err();
    }

    // Generate a libp2p ED25519 certificate and validate it.
    #[test]
    fn test_generate_ed25519_certificate() {
        let host_key = PKey::<Private>::generate_ed25519().unwrap();
        let (_, cert) = super::generate_tls_key_and_certificate(&host_key).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Generate a libp2p secp256k1 certificate and validate it.
    #[test]
    fn test_generate_secp256k1_certificate() {
        let host_key = PKey::<Private>::ec_gen("secp256k1").unwrap();
        let (_, cert) = super::generate_tls_key_and_certificate(&host_key).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Generate a libp2p prime256v1 ECDSA certificate and validate it.
    #[test]
    fn test_generate_prime256v1_certificate() {
        let host_key = PKey::<Private>::ec_gen("prime256v1").unwrap();
        let (_, cert) = super::generate_tls_key_and_certificate(&host_key).unwrap();
        super::validate_certificate(&cert).unwrap();
    }

    // Generate a libp2p secp521r1 ECDSA certificate and validate it.
    #[test]
    fn test_generate_secp521r1_certificate() {
        let host_key = PKey::<Private>::ec_gen("secp521r1").unwrap();
        let (_, cert) = super::generate_tls_key_and_certificate(&host_key).unwrap();
        super::validate_certificate(&cert).unwrap();
    }
}
